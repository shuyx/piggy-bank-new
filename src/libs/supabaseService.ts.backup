import { supabase } from './supabase.ts.backup'
import { AppState } from '../stores/useStore'

class SupabaseService {
  // 用户认证相关
  async signInWithEmail(email: string, password: string) {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password,
    })
    return { data, error }
  }

  async signUpWithEmail(email: string, password: string) {
    const { data, error } = await supabase.auth.signUp({
      email,
      password,
    })
    return { data, error }
  }

  async signOut() {
    const { error } = await supabase.auth.signOut()
    return { error }
  }

  async getCurrentUser() {
    const { data: { user } } = await supabase.auth.getUser()
    return user
  }

  // 数据同步相关
  async syncUserData(userData: Partial<AppState>) {
    try {
      const user = await this.getCurrentUser()
      if (!user) throw new Error('用户未登录')

      const { data, error } = await supabase
        .from('user_data')
        .upsert({
          user_id: user.id,
          total_stars: userData.totalStars || 0,
          current_streak: userData.currentStreak || 0,
          daily_records: userData.dailyRecords || [],
          achievements: userData.achievements || [],
          custom_tasks: userData.customTasks || [],
          updated_at: new Date().toISOString()
        })
        .select()

      if (error) throw error
      
      console.log('数据同步成功:', data)
      return { success: true, data }
    } catch (error) {
      console.error('数据同步失败:', error)
      return { success: false, error }
    }
  }

  async getUserData() {
    try {
      const user = await this.getCurrentUser()
      if (!user) throw new Error('用户未登录')

      const { data, error } = await supabase
        .from('user_data')
        .select('*')
        .eq('user_id', user.id)
        .single()

      if (error && error.code !== 'PGRST116') throw error // PGRST116 是没有找到记录的错误码
      
      return { success: true, data: data || null }
    } catch (error) {
      console.error('获取用户数据失败:', error)
      return { success: false, error }
    }
  }

  // 实时监听数据变化
  subscribeToDataChanges(userId: string, callback: (payload: any) => void) {
    return supabase
      .channel('user_data_changes')
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'user_data',
          filter: `user_id=eq.${userId}`
        },
        callback
      )
      .subscribe()
  }
}

export const supabaseService = new SupabaseService()